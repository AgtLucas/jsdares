/*jshint node:true jquery:true*/
"use strict";

module.exports.clayer = require('./clayer');
module.exports.dares = require('./dares');
module.exports.editor = require('./editor');
module.exports.info = require('./info');
module.exports.jsmm = require('./jsmm');
module.exports.output = require('./output');
module.exports.robot = require('./robot');

module.exports.UI = function() { return this.init.apply(this, arguments); };
module.exports.UI.prototype = {
	icons: {dare: 'icon-file', console: 'icon-list-alt', canvas: 'icon-picture', robot: 'icon-th', info: 'icon-info-sign', home: 'icon-home'},
	outputNames: ['robot', 'console', 'canvas', 'info', 'dare', 'input', 'math', 'home', 'editor'],

	init: function($main) {
		for (var i=0; i<this.outputNames.length; i++) {
			this[this.outputNames[i]] = null;
		}

		this.$main = $main;
		this.$main.addClass('ui-main');

		this.$output = $('<div class="ui-output tabbable"></div>');
		this.$main.append(this.$output);
		this.$tabs = $('<ul class="nav nav-tabs"></ul>');
		this.$output.append(this.$tabs);
		this.$content = $('<div class="tab-content">');
		this.$output.append(this.$content);

		this.$editor = $('<div class="ui-editor"></div>');
		this.$toolbar = $('<div class="ui-toolbar"></div>');
		this.$main.append(this.$editor);
		this.$main.append(this.$toolbar);

		this.loadInitial();
	},

	remove: function() {
		this.removeAll();
		this.$main.removeClass('ui-main');
		this.$output.remove();
		this.$editor.remove();
		this.$toolbar.remove();
	},

	removeAll: function() {
		for (var i=0; i<this.outputNames.length; i++) {
			if (this[this.outputNames[i]] !== null) {
				this[this.outputNames[i]].remove();
				this[this.outputNames[i]] = null;
			}
		}
		this.scope = {};
		this.outputs = [];
		this.$tabs.children('li').remove();
		this.$content.children('div').remove();

		this.tabs = [];
		this.tabsByName = {};
	},

	addTab: function(name) {
		var $tab = $('<li></li>');
		setTimeout(function() { $tab.addClass('tab-button-enabled'); }, 50*this.tabs.length);
		this.$tabs.append($tab);

		var $link = $('<a href="#"><i class="' + this.icons[name] + ' icon-white"></i> ' + name + '</a>');
		$tab.append($link);

		$link.click($.proxy(function(event) {
			event.preventDefault();
			this.selectTab(name);
		}, this));

		var $pane = $('<div class="tab-pane"></div>');
		this.$content.append($pane);

		var $output = $('<div class="tab-output"></div>');
		$pane.append($output);

		this.tabs.push(name);
		this.tabsByName[name] = {$pane: $pane, $tab: $tab};
		return $output;
	},

	addEditor: function() {
		this.editor = new module.exports.editor.Editor(module.exports.jsmm, this.$editor, this.$toolbar);
		return this.editor;
	},

	addRobot: function(readOnly, width, height) {
		var $pane = this.addTab('robot');
		this.robot = new module.exports.output.Robot($pane, this.editor, readOnly, width, height);
		this.outputs.push(this.robot);
		this.scope.robot = this.robot.getAugmentedObject();
		return this.robot;
	},

	addConsole: function() {
		var $pane = this.addTab('console');
		this.console = new module.exports.output.Console($pane, this.editor);
		this.outputs.push(this.console);
		this.scope.console = this.console.getAugmentedObject();
		return this.console;
	},

	addCanvas: function(size) {
		var $pane = this.addTab('canvas');
		this.canvas = new module.exports.output.Canvas($pane, this.editor, size || 540);
		this.outputs.push(this.canvas);
		this.scope.canvas = this.canvas.getAugmentedObject();
		return this.canvas;
	},

	addInfo: function(commandFilter) {
		var $pane = this.addTab('info');
		this.info = new module.exports.info.Info($pane, this.editor, commandFilter);
		this.outputs.push(this.info);
		return this.robot;
	},

	addDare: function(dare) {
		var $pane = this.addTab('dare');
		this.dare = dare;
		this.outputs.push(this.dare);
		dare.makeActive($pane, this);
		this.$main.addClass('ui-dares-active');
		return this.dare;
	},

	addInput: function(mouseObjects) {
		this.input = new module.exports.output.Input(this.editor);
		this.outputs.push(this.input);
		this.scope.document = this.input.getAugmentedDocumentObject();
		this.scope.window = this.input.getAugmentedWindowObject();

		mouseObjects = mouseObjects || [];
		for (var i=0; i<mouseObjects.length; i++) {
			var name = mouseObjects[i];
			this.input.addMouseEvents(this[name].getMouseElement(), name, this.scope[name]);
		}

		return this.input;
	},

	addMath: function() {
		this.math = new module.exports.output.Math();
		this.outputs.push(this.math);
		this.scope.Math = this.math.getAugmentedObject();
		return this.math;
	},

	addHome: function() {
		var $pane = this.addTab('home');
		this.home = new module.exports.output.Home(this, $pane);
		return this.home;
	},

	finish: function() {
		var runner = new module.exports.jsmm.Runner(this.editor, this.scope, {});
		this.editor.updateSettings(runner, this.outputs);
		this.selectTab(this.tabs[0]);
	},

	selectTab: function(name) {
		this.$content.children('.active').removeClass('active');
		this.$tabs.children('ul li.active').removeClass('active');
		this.tabsByName[name].$pane.addClass('active');
		this.tabsByName[name].$tab.addClass('active');
		if (this[name].setFocus !== undefined) this[name].setFocus();
	},

	loadInitial: function() {
		this.removeAll();
		this.addEditor();
		this.addRobot();
		this.addConsole();
		this.addCanvas();
		this.addInfo();
		this.addInput(['canvas']);
		this.addMath();
		this.finish();

		this.editor.setText(window.localStorage.getItem('initial-code') || '');
		this.editor.setTextChangeCallback(function(text) {
			window.localStorage.setItem('initial-code', text);
		});
		if (window.localStorage.getItem('initial-robot') !== null) {
			this.robot.setState(window.localStorage.getItem('initial-robot'));
		}
		this.robot.setStateChangedCallback(function(state) {
			window.localStorage.setItem('initial-robot', state);
		});
	},

	hideDares: function() {
		this.dares.hide();
	},

	getCanvas: function() {
		return this.canvas;
	}
};