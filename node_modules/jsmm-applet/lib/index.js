/*jshint node:true jquery:true*/
"use strict";

module.exports.clayer = require('./clayer');
module.exports.editor = require('./editor');
module.exports.info = require('./info');
module.exports.jsmm = require('./jsmm');
module.exports.output = require('./output');
module.exports.robot = require('./robot');

module.exports.UI = function() { return this.init.apply(this, arguments); };
module.exports.UI.prototype = {
	icons: {dare: 'icon-file', console: 'icon-list-alt', canvas: 'icon-picture', robot: 'icon-th', info: 'icon-info-sign', home: 'icon-home'},
	paneOutputs: ['robot', 'console', 'canvas', 'info'],
	constructors: {
		robot: module.exports.output.Robot,
		console: module.exports.output.Console,
		canvas: module.exports.output.Canvas,
		info: module.exports.info.Info,
		input: module.exports.output.Input,
		Math: module.exports.output.Math
	},

	init: function($main, globalOptions) {
		this.$main = $main;
		this.$main.addClass('ui-main');
		this.globalOptions = globalOptions;

		this.$output = $('<div class="ui-output tabbable"></div>');
		this.$main.append(this.$output);

		this.$tabs = $('<ul class="nav nav-tabs"></ul>');
		this.$output.append(this.$tabs);
		this.$tabs.toggle(!this.globalOptions.hideTabs);

		this.$content = $('<div class="tab-content">');
		this.$output.append(this.$content);

		this.$editor = $('<div class="ui-editor"></div>');
		this.$toolbar = $('<div class="ui-toolbar"></div>');
		this.$main.append(this.$editor);
		this.$main.append(this.$toolbar);

		this.$close = $('<a href="#" class="ui-close">&times;</a>');
		this.$main.append(this.$close);
		if (this.globalOptions.close !== undefined) {
			this.$close.show();
			this.$close.on('click', this.globalOptions.close);
		} else {
			this.$close.hide();
		}

		this.outputs = [];
		this.editor = null;
		this.removeAll();
	},

	remove: function() {
		this.removeAll();
		this.$main.removeClass('ui-main');
		this.$output.remove();
		this.$editor.remove();
		this.$toolbar.remove();
		this.$close.remove();
	},

	removeAll: function() {
		for (var i=0; i<this.outputs.length; i++) {
			this.outputs[i].remove();
		}
		if (this.editor !== null) {
			this.editor.remove();
		}
		this.$tabs.children('li').remove();
		this.$content.children('div').remove();

		this.scope = {};
		this.outputs = [];
		this.outputsByName = {};
		this.tabs = [];
		this.tabsByName = {};
	},

	loadOutputs: function(outputs) {
		for (var name in outputs) {
			var output;
			if (this.paneOutputs.indexOf(name) >= 0) {
				output = new this.constructors[name](this.editor, outputs[name], this.addTab(name));
			} else {
				output = new this.constructors[name](this.editor, outputs[name]);
			}
			this.outputs.push(output);
			this.outputsByName[name] = output;

			if (name === 'input') {
				this.scope.document = output.getAugmentedDocumentObject();
				this.scope.window = output.getAugmentedWindowObject();

				var mouseObjects = outputs[name].mouseObjects || [];
				for (var i=0; i<mouseObjects.length; i++) {
					var outputName = mouseObjects[i];
					output.addMouseEvents(this.outputsByName[outputName].getMouseElement(), outputName, this.scope[outputName]);
				}
			} else if (output.getAugmentedObject !== undefined) {
				this.scope[name] = output.getAugmentedObject();
			}
		}

		this.editor.updateSettings(new module.exports.jsmm.Runner(this.editor, this.scope), this.outputs);
	},

	addTab: function(name) {
		var $tab = $('<li></li>');
		setTimeout(function() { $tab.addClass('tab-button-enabled'); }, 200*this.tabs.length + 300);
		this.$tabs.append($tab);

		var $link = $('<a href="#"><i class="' + this.icons[name] + ' icon-white"></i> ' + name + '</a>');
		$tab.append($link);

		$link.click($.proxy(function(event) {
			event.preventDefault();
			this.selectTab(name);
		}, this));

		var $pane = $('<div class="tab-pane"></div>');
		this.$content.append($pane);

		var $output = $('<div class="tab-output"></div>');
		$pane.append($output);

		this.tabs.push(name);
		this.tabsByName[name] = {$pane: $pane, $tab: $tab};
		return $output;
	},

	addEditor: function(options) {
		this.editor = new module.exports.editor.Editor(options, module.exports.jsmm, this.$editor, this.$toolbar);
		//this.$toolbar.removeClass('ui-toolbar-enabled');
		var $toolbar = this.$toolbar;
		//setTimeout(function() { $toolbar.addClass('ui-toolbar-enabled'); }, 200);
		return this.editor;
	},

	selectTab: function(name) {
		this.$content.children('.active').removeClass('active');
		this.$tabs.children('ul li.active').removeClass('active');
		this.tabsByName[name].$pane.addClass('active');
		this.tabsByName[name].$tab.addClass('active');
		if (this.outputsByName[name] !== undefined &&
			this.outputsByName[name].setFocus !== undefined) this.outputsByName[name].setFocus();
	},

	getOutput: function(name) {
		return this.outputsByName[name];
	},

	loadDefault: function() {
		this.load({
			editor: {},
			outputs: {
				robot: {},
				console: {},
				canvas: {},
				info: {},
				input: {mouseObjects: ['canvas']},
				Math: {}
			}
		});
	}
};