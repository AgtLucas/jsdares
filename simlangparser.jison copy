/* simlang.js: simplified educational javascript dialect */

/* lexical grammar */
%lex

digit			[0-9]
alpha			[a-zA-z_]
alphanum		(?:{alpha}|{digit})
exponent		(?:[eE][+-]?{digit}+)
whitespace		(?:[ \f\r\t\v\u00A0\u2028\u2029]+)
newlines		(?:(?:[\n]{whitespace}?)+)
fraction		(?:"."{digit}+)
number			(?:(?:(?:[1-9]{digit}*)|"0"){fraction}?{exponent}?)
string			(?:["]([^\"](?:[\\][\\])?(?:[\\]["])?)*["])
reserved		(?:"null"|"break"|"case"|"catch"|"default"|"finally"|"instanceof"|"new"|"continue"|"void"|"delete"|"this"|"do"|"in"|"switch"|"throw"|"try"|"typeof"|"with"|"abstract"|"boolean"|"byte"|"char"|"class"|"const"|"debugger"|"double"|"enum"|"export"|"extends"|"final"|"float"|"goto"|"implements"|"import"|"int"|"interface"|"long"|"native"|"package"|"private"|"protected"|"public"|"short"|"static"|"super"|"synchronized"|"throws"|"transient"|"volatile")

%%

{whitespace}								/* skip whitespace */
"++"										return "++";
"--"										return "--";
"+="										return "+=";
"-="										return "-=";
"*="										return "*=";
"/="										return "/=";
"%="										return "%=";
"=="										return "==";
"!="										return "!=";
">="										return ">=";
"<="										return "<=";
">"											return ">";
"<"											return "<";
"&&"										return "&&";
"||"										return "||";
"="											return "=";
"+"											return "+";
"-"											return "-";
"*"											return "*";
"/"											return "/";
"%"											return "%";
";"											return ";";
"!"											return "!";
"("											return "(";
")"											return ")";
"{"											return "{";
"}"											return "}";
"["											return "[";
"]"											return "]";
"."											return ".";
","											return ",";
{reserved}									return "RESERVED";
"true"										return "TRUE";
"false"										return "FALSE";
"if"										return "IF";
{newlines}?"else"							return "ELSE";
"while"										return "WHILE";
"for"										return "FOR";
"var"										return "VAR";
"function"									return "FUNCTION";
"return"									return "RETURN";
{alpha}{alphanum}*							return "IDENT";
{newlines}									return "NEWLINE";
{number}									return "NUMBER";
{string}									return "STRING";
<<EOF>>										return "EOF";

/lex

%start program

%% /* language grammar */

program
	: programStatementList EOF					{ $$ = $1; return $$; }
;

programStatementList
	: /* empty */
		{ $$ = new yy.StatementList(yy.context, yy.context.globalScope); }
	| programStatementList commonStatement NEWLINE	
		{ $$ = $1; $$.addStatement($2); }
	| programStatementList functionDeclaration NEWLINE
		{ $$ = $1; $$.addStatement($2); }
;

statementList
	: /* empty */
		{ $$ = new yy.StatementList(); }
	| statementList commonStatement NEWLINE
		{ $$ = $1; $$.addStatement($2); }
;

commonStatement
	: simpleStatement ";"						{ $$ = $1 + ";"; }
	| blockStatement
	| returnStatement
;

simpleStatement
	: assignmentStatement
	| varStatement
	| callStatement
	| identExpression "++"						{ $$ = $1 + "++"; }
	| identExpression "--"						{ $$ = $1 + "--"; }
;

assignmentStatement
	: identExpression "=" expression			{ $$ = $1 + " = " + $3; }
;

varStatement
	: VAR varList								{ $$ = "var " + $2; }
;

varList
	: varListItem
	| varList "," varListItem					{ $$ = $1 + ", " + $3; }
;

varListItem
	: IDENT
	| IDENT "=" expression						{ $$ = $1 + " = " + $3; }
;

expression
	: andExpression
	| expression "||" andExpression				{ $$ = "(" + $1 + "||" + $3 + ")"; }
;

andExpression
	: relationalExpression
	| andExpression "&&" relationalExpression	{ $$ = "(" + $1 + "&&" + $3 + ")"; }
;

relationalExpression
	: addExpression
	| relationalExpression "==" addExpression	{ $$ = "(" + $1 + "==" + $3 + ")"; }
	| relationalExpression "!=" addExpression	{ $$ = "(" + $1 + "!=" + $3 + ")"; }
	| relationalExpression ">=" addExpression	{ $$ = "(" + $1 + ">=" + $3 + ")"; }
	| relationalExpression "<=" addExpression	{ $$ = "(" + $1 + "<=" + $3 + ")"; }
	| relationalExpression ">" addExpression	{ $$ = "(" + $1 + ">" + $3 + ")"; }
	| relationalExpression "<" addExpression	{ $$ = "(" + $1 + "<" + $3 + ")"; }
;

addExpression
	: multExpression
	| addExpression "+" multExpression			{ $$ = "(" + $1 + "+" + $3 + ")"; }
	| addExpression "-" multExpression			{ $$ = "(" + $1 + "-" + $3 + ")"; }
;

multExpression
	: unaryExpression
	| multExpression "*" unaryExpression		{ $$ = "(" + $1 + "*" + $3 + ")"; }
	| multExpression "/" unaryExpression		{ $$ = "(" + $1 + "/" + $3 + ")"; }
	| multExpression "%" unaryExpression		{ $$ = "(" + $1 + "%" + $3 + ")"; }
;

unaryExpression
	: primaryExpression
	| "+" unaryExpression						{ $$ = "+" + $2; }
	| "-" unaryExpression						{ $$ = "-" + $2; }
;

primaryExpression
	: identExpression
	| NUMBER
	| STRING
	| TRUE
	| FALSE
	| callStatement
	| "(" expression ")"						{ $$ = "(" + $2 + ")"; }
;

identExpression
	: IDENT
	| IDENT "." IDENT							{ $$ = $1 + "." + $3; }
	| IDENT "[" expression "]"					{ $$ = $1 + "[" + expression + "]"; }
;

callStatement
	: identExpression "(" ")"					{ $$ = $1 + "()"; }
	| identExpression "(" callArguments ")"		{ $$ = $1 + "(" + $callArguments + ")"; }
;

callArguments
	: expression
	| callArguments "," expression				{ $$ = $1 + ", " + $3; }
;

blockStatement
	: ifStatement
	| whileStatement
	| forStatement
;

ifStatement
	: IF "(" expression ")" "{" NEWLINE statementList "}" elseStatement
		{ $$ = "if (" + $expression + ") {\n" + $statementList + "}" + $elseStatement; }
;

elseStatement
	: /* empty */								{ $$ = ""; }
	| ELSE ifStatement							{ $$ = " else " + $2; }
	| ELSE "{" NEWLINE statementList "}"		{ $$ = " else {\n" + $statementList + "}"; }
;

whileStatement
	: WHILE "(" expression ")" "{" NEWLINE statementList "}"
		{ $$ = "while (" + $expression + ") {\n" + $statementList + "}"; }
;

forStatement
	: FOR "(" simpleStatement ";" expression ";" simpleStatement ")" "{" NEWLINE statementList "}"
		{ $$ = "for (" + $simpleStatement1 + "; " + $expression + "; " + $simpleStatement2 + ") {\n" + $statementList + "}"; }
;

functionDeclaration
	: FUNCTION IDENT "(" ")" "{" NEWLINE statementList "}"
		{ $$ = "function " + $IDENT + "() {\n" + $statementList + "}"; }
	| FUNCTION IDENT "(" functionArguments ")" "{" NEWLINE statementList "}"
		{ $$ = "function " + $IDENT + "(" + $functionArguments + ") {\n" + $statementList + "}"; }
;

functionArguments
	: IDENT
	| functionArguments "," IDENT				{ $$ = $1 + ", " + $3; }
;

returnStatement
	: RETURN ";"								{ $$ = "return;" }
	| RETURN expression ";"						{ $$ = "return " + $2 + ";" }
;

reserved: RESERVED;